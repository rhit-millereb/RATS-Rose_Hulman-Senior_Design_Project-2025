import random
import time
import numpy                                             
from numpy import sqrt, dot, cross                       
from numpy.linalg import norm  
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

def trilaterate(P1,P2,P3,r1,r2,r3):                      
    temp1 = P2-P1                                        
    e_x = temp1/norm(temp1)                              
    temp2 = P3-P1                                        
    i = dot(e_x,temp2)                                   
    temp3 = temp2 - i*e_x                                
    e_y = temp3/norm(temp3)                              
    e_z = cross(e_x,e_y)                                 
    d = norm(P2-P1)                                      
    j = dot(e_y,temp2)                                   
    x = (r1*r1 - r2*r2 + d*d) / (2*d)                    
    y = (r1*r1 - r3*r3 -2*i*x + i*i + j*j) / (2*j)       
    temp4 = r1*r1 - x*x - y*y
    z = sqrt(abs(temp4))                               
    p_12_a = P1 + x*e_x + y*e_y + z*e_z                  
    return p_12_a  

if __name__ == "__main__":
    P1 = numpy.array([0.0,0.0,0.0])
    P2 = numpy.array([4.5,0.0,0.0])
    P3 = numpy.array([2.0,1.5,0.0])
    scatter = [0] * 100
    rs1 = [0] * 100  # Initialize an array of size 100
    rs1[:] = [
    1.91, 1.92, 1.95, 1.9, 1.92, 1.88, 1.91, 1.96, 1.94, 1.91,
    1.92, 1.96, 1.93, 1.92, 1.92, 1.94, 1.93, 1.91, 1.94, 1.89,
    1.91, 1.92, 1.92, 1.95, 1.96, 1.94, 1.92, 1.95, 1.94, 1.93,
    1.96, 1.92, 1.92, 1.92, 1.94, 1.91, 1.9, 1.93, 1.92, 1.9,
    1.91, 1.91, 1.94, 1.91, 1.99, 1.94, 1.91, 1.94, 1.93, 1.96,
    1.95, 1.89, 1.91, 1.9, 1.92, 1.92, 1.91, 1.92, 1.92, 1.94,
    1.91, 1.9, 1.93, 1.95, 1.92, 1.89, 1.93, 1.91, 1.92, 1.91,
    1.9, 1.9, 1.94, 1.94, 1.92, 1.92, 1.94, 1.93, 1.92, 1.92,
    1.9, 1.96, 1.95, 1.93, 1.91, 1.88, 1.92, 1.95, 1.93, 1.92,
    1.92, 1.91, 1.94, 1.92, 1.95, 1.93, 1.94, 1.92, 1.91, 1.94
    ]
    rs2 = [0] * 100  # Initialize an array of size 100
    rs2[:] = [
    2.45, 2.43, 2.43, 2.43, 2.44, 2.47, 2.44, 2.43, 2.47, 2.41,
    2.46, 2.44, 2.43, 2.4, 2.45, 2.42, 2.4, 2.45, 2.46, 2.42,
    2.43, 2.43, 2.45, 2.45, 2.43, 2.43, 2.44, 2.43, 2.44, 2.43,
    2.43, 2.44, 2.43, 2.42, 2.44, 2.44, 2.42, 2.44, 2.42, 2.43,
    2.42, 2.43, 2.42, 2.42, 2.45, 2.42, 2.43, 2.42, 2.43, 2.42,
    2.43, 2.45, 2.43, 2.41, 2.43, 2.42, 2.42, 2.42, 2.44, 2.42,
    2.43, 2.41, 2.42, 2.43, 2.43, 2.41, 2.45, 2.42, 2.42, 2.46,
    2.43, 2.41, 2.42, 2.43, 2.41, 2.43, 2.44, 2.45, 2.4, 2.4,
    2.42, 2.41, 2.41, 2.43, 2.46, 2.44, 2.42, 2.41, 2.42, 2.44,
    2.43, 2.42, 2.42, 2.44, 2.41, 2.43, 2.45, 2.44, 2.4, 2.43
    ]
    rs3 = [0] * 100  # Initialize an array of size 100
    rs3[:] = [
    1.39, 1.42, 1.41, 1.4, 1.41, 1.47, 1.43, 1.4, 1.42, 1.41,
    1.4, 1.41, 1.44, 1.4, 1.41, 1.43, 1.41, 1.38, 1.41, 1.37,
    1.39, 1.38, 1.38, 1.39, 1.41, 1.45, 1.37, 1.41, 1.38, 1.38,
    1.4, 1.39, 1.38, 1.37, 1.38, 1.38, 1.41, 1.37, 1.37, 1.39,
    1.42, 1.4, 1.41, 1.41, 1.38, 1.4, 1.38, 1.38, 1.39, 1.39,
    1.39, 1.43, 1.4, 1.4, 1.41, 1.4, 1.4, 1.38, 1.38, 1.39,
    1.4, 1.39, 1.43, 1.4, 1.4, 1.43, 1.41, 1.39, 1.36, 1.38,
    1.38, 1.37, 1.38, 1.43, 1.38, 1.4, 1.43, 1.37, 1.4, 1.39,
    1.4, 1.39, 1.42, 1.43, 1.4, 1.39, 1.42, 1.4, 1.39, 1.39,
    1.42, 1.4, 1.38, 1.4, 1.39, 1.4, 1.39, 1.38, 1.41, 1.42
    ]
    
    for i in range(100):
        scatter[i] = trilaterate(P1,P2,P3,rs1[i],rs2[i],rs3[i])
        plt.scatter(scatter[i][0], scatter[i][1], color = "r")
    plt.scatter((P1[0], P2[0], P3[0]),(P1[1], P2[1], P3[1]), color = 'b')
    plt.scatter(2,0, color = "g")
    plt.grid()
    plt.show()
            
    